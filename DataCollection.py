# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import ElementClickInterceptedException,StaleElementReferenceException
import time
import csv

class TestSC2():
    def __init__(self):
        self.driver = webdriver.Chrome(ChromeDriverManager().install())

    def test_sC2(self,year):
        self.driver.get("https://dashboard.bepress.com/?dashboardToken=5de7ba3ccfe5f8692534d42cngYcaP4OziqyLVPY2Ssye6d18lZeWrkB2TMYwFX0")
        self.driver.set_window_size(1680, 1000)
        time.sleep(10)

        self.driver.find_element(By.CSS_SELECTOR, ".ng-isolate-scope:nth-child(1) > .ng-binding").click()
        self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(5)").click()
        for y in range(year-2004):
            self.driver.find_element(By.CSS_SELECTOR, ".next:nth-child(3)").click()

        self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(3) > .available:nth-child(2)").click()

        self.driver.find_element(By.CSS_SELECTOR, ".right .prev").click() #SWAP out css selector w/ associated month
        self.driver.find_element(By.CSS_SELECTOR, ".in-range:nth-child(2)").click()        #SWAP out css selector w/ associated month
        self.driver.find_element(By.CSS_SELECTOR, ".applyBtn").click()

        tableCounter = 0

        #Download Referral Data
        self.click("#ToolTables_dtReferrers_0 > span")

        #Download Institutional Data
        self.click("#ToolTables_dtInstitutions_0 > span")
        numInstitutions = int(self.getText(".row:nth-child(3) .badge"))
        remaining = numInstitutions%10
        fullRounds = int(numInstitutions/10)

        for round in range(fullRounds):
            isOdd = 0
            for i in range(10):
                if isOdd % 2 == 0:
                    odd = 'odd'
                else:
                    odd = 'even'
                isOdd += 1
                self.click("tbody:nth-child(3) > ." + str(odd) + ":nth-child(" + str(i + 1) + ") > td:nth-child(1)")
                time.sleep(5)
                self.click("#ToolTables_DataTables_Table_" + str(tableCounter) + "_0 > span")
                self.click(".open > td:nth-child(1)")
                tableCounter += 1
            if not(round == fullRounds-1 and remaining == 0):
                self.click("#dtInstitutions_next")
            time.sleep(3)

        isOdd = 0
        for r in range(remaining):
            if isOdd % 2 == 0:
                odd = 'odd'
            else:
                odd = 'even'
            isOdd += 1
            self.click("tbody:nth-child(3) > ." + str(odd) + ":nth-child(" + str(r + 1) + ") > td:nth-child(1)")
            time.sleep(5)
            self.click("#ToolTables_DataTables_Table_" + str(tableCounter) + "_0 > span")
            self.click(".open > td:nth-child(1)")
            tableCounter += 1
        time.sleep(3)

        # Download Geographic Data
        self.click("#ToolTables_dtCountries_0 > span")
        numCountries = int(self.getText(".row:nth-child(4) .badge"))
        remaining = numCountries % 10
        fullRounds = int(numCountries / 10)

        for round2 in range(fullRounds):
            isOdd = 0
            for i in range(10):
                if isOdd % 2 == 0:
                    odd = 'odd'
                else:
                    odd = 'even'
                isOdd += 1
                self.click("#dtCountries ."+str(odd)+":nth-child(" + str(i + 1) + ") > td:nth-child(1)")
                time.sleep(5)
                self.click("#ToolTables_DataTables_Table_" + str(tableCounter) + "_0 > span")
                self.click(".open > td:nth-child(1)")
                tableCounter += 1
            if not (round == fullRounds - 1 and remaining == 0):
                self.click("#dtCountries_next")
            time.sleep(3)

        isOdd = 0
        for r2 in range(remaining):
            if isOdd % 2 == 0:
                odd = 'odd'
            else:
                odd = 'even'
            isOdd += 1
            self.click("#dtCountries ."+str(odd)+":nth-child(" + str(r2 + 1) + ") > td:nth-child(1)")
            time.sleep(5)
            self.click("#ToolTables_DataTables_Table_" + str(tableCounter) + "_0 > span")
            self.click(".open > td:nth-child(1)")
            tableCounter += 1
        time.sleep(3)

        self.driver.quit()

    def click(self,css):
        #self.driver.execute_script('arguments[0].scrollBy(0,-100);', l)
        while True:
            try:
                l = self.driver.find_element_by_css_selector(css)
                self.driver.execute_script('arguments[0].scrollIntoView(false);', l)
                l.click()
                break
            except ElementClickInterceptedException:
                cookieButton = self.driver.find_element_by_class_name('cc-dismiss')
                try:
                    cookieButton.click()
                except:
                    pass
            except StaleElementReferenceException:
                print("stale")
                pass

    def getText(self,css):
        l = self.driver.find_element_by_css_selector(css)
        return l.text


t = TestSC2()
t.test_sC2(2019)